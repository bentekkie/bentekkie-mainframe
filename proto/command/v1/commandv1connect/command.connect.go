// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/command/v1/command.proto

package commandv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bentekkie/bentekkie-mainframe/proto/command/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// shellName is the fully-qualified name of the shell service.
	shellName = "mainframe.shell"
)

// ShellClient is a client for the mainframe.shell service.
type ShellClient interface {
	RunCommand(context.Context, *connect_go.Request[v1.Command]) (*connect_go.Response[v1.Response], error)
	RunSudoCommand(context.Context, *connect_go.Request[v1.SudoCommand]) (*connect_go.Response[v1.SudoResponse], error)
	AutoComplete(context.Context, *connect_go.Request[v1.Command]) (*connect_go.Response[v1.AutoCompResponse], error)
	SudoAutoComplete(context.Context, *connect_go.Request[v1.SudoCommand]) (*connect_go.Response[v1.AutoCompResponse], error)
	GetRoot(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.Folder], error)
}

// NewShellClient constructs a client for the mainframe.shell service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewShellClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ShellClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &shellClient{
		runCommand: connect_go.NewClient[v1.Command, v1.Response](
			httpClient,
			baseURL+"/mainframe.shell/runCommand",
			opts...,
		),
		runSudoCommand: connect_go.NewClient[v1.SudoCommand, v1.SudoResponse](
			httpClient,
			baseURL+"/mainframe.shell/runSudoCommand",
			opts...,
		),
		autoComplete: connect_go.NewClient[v1.Command, v1.AutoCompResponse](
			httpClient,
			baseURL+"/mainframe.shell/autoComplete",
			opts...,
		),
		sudoAutoComplete: connect_go.NewClient[v1.SudoCommand, v1.AutoCompResponse](
			httpClient,
			baseURL+"/mainframe.shell/sudoAutoComplete",
			opts...,
		),
		getRoot: connect_go.NewClient[emptypb.Empty, v1.Folder](
			httpClient,
			baseURL+"/mainframe.shell/getRoot",
			opts...,
		),
	}
}

// shellClient implements ShellClient.
type shellClient struct {
	runCommand       *connect_go.Client[v1.Command, v1.Response]
	runSudoCommand   *connect_go.Client[v1.SudoCommand, v1.SudoResponse]
	autoComplete     *connect_go.Client[v1.Command, v1.AutoCompResponse]
	sudoAutoComplete *connect_go.Client[v1.SudoCommand, v1.AutoCompResponse]
	getRoot          *connect_go.Client[emptypb.Empty, v1.Folder]
}

// RunCommand calls mainframe.shell.runCommand.
func (c *shellClient) RunCommand(ctx context.Context, req *connect_go.Request[v1.Command]) (*connect_go.Response[v1.Response], error) {
	return c.runCommand.CallUnary(ctx, req)
}

// RunSudoCommand calls mainframe.shell.runSudoCommand.
func (c *shellClient) RunSudoCommand(ctx context.Context, req *connect_go.Request[v1.SudoCommand]) (*connect_go.Response[v1.SudoResponse], error) {
	return c.runSudoCommand.CallUnary(ctx, req)
}

// AutoComplete calls mainframe.shell.autoComplete.
func (c *shellClient) AutoComplete(ctx context.Context, req *connect_go.Request[v1.Command]) (*connect_go.Response[v1.AutoCompResponse], error) {
	return c.autoComplete.CallUnary(ctx, req)
}

// SudoAutoComplete calls mainframe.shell.sudoAutoComplete.
func (c *shellClient) SudoAutoComplete(ctx context.Context, req *connect_go.Request[v1.SudoCommand]) (*connect_go.Response[v1.AutoCompResponse], error) {
	return c.sudoAutoComplete.CallUnary(ctx, req)
}

// GetRoot calls mainframe.shell.getRoot.
func (c *shellClient) GetRoot(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.Folder], error) {
	return c.getRoot.CallUnary(ctx, req)
}

// ShellHandler is an implementation of the mainframe.shell service.
type ShellHandler interface {
	RunCommand(context.Context, *connect_go.Request[v1.Command]) (*connect_go.Response[v1.Response], error)
	RunSudoCommand(context.Context, *connect_go.Request[v1.SudoCommand]) (*connect_go.Response[v1.SudoResponse], error)
	AutoComplete(context.Context, *connect_go.Request[v1.Command]) (*connect_go.Response[v1.AutoCompResponse], error)
	SudoAutoComplete(context.Context, *connect_go.Request[v1.SudoCommand]) (*connect_go.Response[v1.AutoCompResponse], error)
	GetRoot(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.Folder], error)
}

// NewShellHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewShellHandler(svc ShellHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/mainframe.shell/runCommand", connect_go.NewUnaryHandler(
		"/mainframe.shell/runCommand",
		svc.RunCommand,
		opts...,
	))
	mux.Handle("/mainframe.shell/runSudoCommand", connect_go.NewUnaryHandler(
		"/mainframe.shell/runSudoCommand",
		svc.RunSudoCommand,
		opts...,
	))
	mux.Handle("/mainframe.shell/autoComplete", connect_go.NewUnaryHandler(
		"/mainframe.shell/autoComplete",
		svc.AutoComplete,
		opts...,
	))
	mux.Handle("/mainframe.shell/sudoAutoComplete", connect_go.NewUnaryHandler(
		"/mainframe.shell/sudoAutoComplete",
		svc.SudoAutoComplete,
		opts...,
	))
	mux.Handle("/mainframe.shell/getRoot", connect_go.NewUnaryHandler(
		"/mainframe.shell/getRoot",
		svc.GetRoot,
		opts...,
	))
	return "/mainframe.shell/", mux
}

// UnimplementedShellHandler returns CodeUnimplemented from all methods.
type UnimplementedShellHandler struct{}

func (UnimplementedShellHandler) RunCommand(context.Context, *connect_go.Request[v1.Command]) (*connect_go.Response[v1.Response], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mainframe.shell.runCommand is not implemented"))
}

func (UnimplementedShellHandler) RunSudoCommand(context.Context, *connect_go.Request[v1.SudoCommand]) (*connect_go.Response[v1.SudoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mainframe.shell.runSudoCommand is not implemented"))
}

func (UnimplementedShellHandler) AutoComplete(context.Context, *connect_go.Request[v1.Command]) (*connect_go.Response[v1.AutoCompResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mainframe.shell.autoComplete is not implemented"))
}

func (UnimplementedShellHandler) SudoAutoComplete(context.Context, *connect_go.Request[v1.SudoCommand]) (*connect_go.Response[v1.AutoCompResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mainframe.shell.sudoAutoComplete is not implemented"))
}

func (UnimplementedShellHandler) GetRoot(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.Folder], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("mainframe.shell.getRoot is not implemented"))
}
