/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.mainframe.AutoCompResponse', null, global);
goog.exportSymbol('proto.mainframe.Command', null, global);
goog.exportSymbol('proto.mainframe.CommandType', null, global);
goog.exportSymbol('proto.mainframe.Folder', null, global);
goog.exportSymbol('proto.mainframe.Response', null, global);
goog.exportSymbol('proto.mainframe.ResponseType', null, global);
goog.exportSymbol('proto.mainframe.SudoCommand', null, global);
goog.exportSymbol('proto.mainframe.SudoCommandType', null, global);
goog.exportSymbol('proto.mainframe.SudoResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mainframe.AutoCompResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mainframe.AutoCompResponse.repeatedFields_, null);
};
goog.inherits(proto.mainframe.AutoCompResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mainframe.AutoCompResponse.displayName = 'proto.mainframe.AutoCompResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mainframe.Folder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mainframe.Folder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mainframe.Folder.displayName = 'proto.mainframe.Folder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mainframe.SudoCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mainframe.SudoCommand.repeatedFields_, null);
};
goog.inherits(proto.mainframe.SudoCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mainframe.SudoCommand.displayName = 'proto.mainframe.SudoCommand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mainframe.Command = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.mainframe.Command.repeatedFields_, null);
};
goog.inherits(proto.mainframe.Command, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mainframe.Command.displayName = 'proto.mainframe.Command';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mainframe.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mainframe.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mainframe.Response.displayName = 'proto.mainframe.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.mainframe.SudoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.mainframe.SudoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.mainframe.SudoResponse.displayName = 'proto.mainframe.SudoResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mainframe.AutoCompResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mainframe.AutoCompResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mainframe.AutoCompResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mainframe.AutoCompResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.AutoCompResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    completionsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mainframe.AutoCompResponse}
 */
proto.mainframe.AutoCompResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mainframe.AutoCompResponse;
  return proto.mainframe.AutoCompResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mainframe.AutoCompResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mainframe.AutoCompResponse}
 */
proto.mainframe.AutoCompResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCompletions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mainframe.AutoCompResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mainframe.AutoCompResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mainframe.AutoCompResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.AutoCompResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCompletionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string completions = 1;
 * @return {!Array<string>}
 */
proto.mainframe.AutoCompResponse.prototype.getCompletionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.mainframe.AutoCompResponse.prototype.setCompletionsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.mainframe.AutoCompResponse.prototype.addCompletions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.mainframe.AutoCompResponse.prototype.clearCompletionsList = function() {
  this.setCompletionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mainframe.Folder.prototype.toObject = function(opt_includeInstance) {
  return proto.mainframe.Folder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mainframe.Folder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.Folder.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mainframe.Folder}
 */
proto.mainframe.Folder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mainframe.Folder;
  return proto.mainframe.Folder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mainframe.Folder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mainframe.Folder}
 */
proto.mainframe.Folder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mainframe.Folder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mainframe.Folder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mainframe.Folder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.Folder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string path = 5;
 * @return {string}
 */
proto.mainframe.Folder.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.mainframe.Folder.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mainframe.SudoCommand.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mainframe.SudoCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.mainframe.SudoCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mainframe.SudoCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.SudoCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, 0),
    argsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    currentdir: (f = msg.getCurrentdir()) && proto.mainframe.Folder.toObject(includeInstance, f),
    jwt: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mainframe.SudoCommand}
 */
proto.mainframe.SudoCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mainframe.SudoCommand;
  return proto.mainframe.SudoCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mainframe.SudoCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mainframe.SudoCommand}
 */
proto.mainframe.SudoCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mainframe.SudoCommandType} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 3:
      var value = new proto.mainframe.Folder;
      reader.readMessage(value,proto.mainframe.Folder.deserializeBinaryFromReader);
      msg.setCurrentdir(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJwt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mainframe.SudoCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mainframe.SudoCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mainframe.SudoCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.SudoCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getCurrentdir();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mainframe.Folder.serializeBinaryToWriter
    );
  }
  f = message.getJwt();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional SudoCommandType command = 1;
 * @return {!proto.mainframe.SudoCommandType}
 */
proto.mainframe.SudoCommand.prototype.getCommand = function() {
  return /** @type {!proto.mainframe.SudoCommandType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.mainframe.SudoCommandType} value */
proto.mainframe.SudoCommand.prototype.setCommand = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string args = 2;
 * @return {!Array<string>}
 */
proto.mainframe.SudoCommand.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.mainframe.SudoCommand.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.mainframe.SudoCommand.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.mainframe.SudoCommand.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional Folder currentDir = 3;
 * @return {?proto.mainframe.Folder}
 */
proto.mainframe.SudoCommand.prototype.getCurrentdir = function() {
  return /** @type{?proto.mainframe.Folder} */ (
    jspb.Message.getWrapperField(this, proto.mainframe.Folder, 3));
};


/** @param {?proto.mainframe.Folder|undefined} value */
proto.mainframe.SudoCommand.prototype.setCurrentdir = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mainframe.SudoCommand.prototype.clearCurrentdir = function() {
  this.setCurrentdir(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mainframe.SudoCommand.prototype.hasCurrentdir = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string jwt = 4;
 * @return {string}
 */
proto.mainframe.SudoCommand.prototype.getJwt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.mainframe.SudoCommand.prototype.setJwt = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.mainframe.Command.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mainframe.Command.prototype.toObject = function(opt_includeInstance) {
  return proto.mainframe.Command.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mainframe.Command} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.Command.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: jspb.Message.getFieldWithDefault(msg, 1, 0),
    argsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    currentdir: (f = msg.getCurrentdir()) && proto.mainframe.Folder.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mainframe.Command}
 */
proto.mainframe.Command.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mainframe.Command;
  return proto.mainframe.Command.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mainframe.Command} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mainframe.Command}
 */
proto.mainframe.Command.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.mainframe.CommandType} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addArgs(value);
      break;
    case 3:
      var value = new proto.mainframe.Folder;
      reader.readMessage(value,proto.mainframe.Folder.deserializeBinaryFromReader);
      msg.setCurrentdir(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mainframe.Command.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mainframe.Command.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mainframe.Command} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.Command.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getCurrentdir();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.mainframe.Folder.serializeBinaryToWriter
    );
  }
};


/**
 * optional CommandType command = 1;
 * @return {!proto.mainframe.CommandType}
 */
proto.mainframe.Command.prototype.getCommand = function() {
  return /** @type {!proto.mainframe.CommandType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.mainframe.CommandType} value */
proto.mainframe.Command.prototype.setCommand = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string args = 2;
 * @return {!Array<string>}
 */
proto.mainframe.Command.prototype.getArgsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.mainframe.Command.prototype.setArgsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.mainframe.Command.prototype.addArgs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.mainframe.Command.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional Folder currentDir = 3;
 * @return {?proto.mainframe.Folder}
 */
proto.mainframe.Command.prototype.getCurrentdir = function() {
  return /** @type{?proto.mainframe.Folder} */ (
    jspb.Message.getWrapperField(this, proto.mainframe.Folder, 3));
};


/** @param {?proto.mainframe.Folder|undefined} value */
proto.mainframe.Command.prototype.setCurrentdir = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mainframe.Command.prototype.clearCurrentdir = function() {
  this.setCurrentdir(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mainframe.Command.prototype.hasCurrentdir = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mainframe.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.mainframe.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mainframe.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: (f = msg.getCommand()) && proto.mainframe.Command.toObject(includeInstance, f),
    currentdir: (f = msg.getCurrentdir()) && proto.mainframe.Folder.toObject(includeInstance, f),
    resp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mainframe.Response}
 */
proto.mainframe.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mainframe.Response;
  return proto.mainframe.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mainframe.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mainframe.Response}
 */
proto.mainframe.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mainframe.Command;
      reader.readMessage(value,proto.mainframe.Command.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 2:
      var value = new proto.mainframe.Folder;
      reader.readMessage(value,proto.mainframe.Folder.deserializeBinaryFromReader);
      msg.setCurrentdir(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResp(value);
      break;
    case 4:
      var value = /** @type {!proto.mainframe.ResponseType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mainframe.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mainframe.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mainframe.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mainframe.Command.serializeBinaryToWriter
    );
  }
  f = message.getCurrentdir();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mainframe.Folder.serializeBinaryToWriter
    );
  }
  f = message.getResp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional Command command = 1;
 * @return {?proto.mainframe.Command}
 */
proto.mainframe.Response.prototype.getCommand = function() {
  return /** @type{?proto.mainframe.Command} */ (
    jspb.Message.getWrapperField(this, proto.mainframe.Command, 1));
};


/** @param {?proto.mainframe.Command|undefined} value */
proto.mainframe.Response.prototype.setCommand = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mainframe.Response.prototype.clearCommand = function() {
  this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mainframe.Response.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Folder currentDir = 2;
 * @return {?proto.mainframe.Folder}
 */
proto.mainframe.Response.prototype.getCurrentdir = function() {
  return /** @type{?proto.mainframe.Folder} */ (
    jspb.Message.getWrapperField(this, proto.mainframe.Folder, 2));
};


/** @param {?proto.mainframe.Folder|undefined} value */
proto.mainframe.Response.prototype.setCurrentdir = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mainframe.Response.prototype.clearCurrentdir = function() {
  this.setCurrentdir(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mainframe.Response.prototype.hasCurrentdir = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string resp = 3;
 * @return {string}
 */
proto.mainframe.Response.prototype.getResp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mainframe.Response.prototype.setResp = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ResponseType type = 4;
 * @return {!proto.mainframe.ResponseType}
 */
proto.mainframe.Response.prototype.getType = function() {
  return /** @type {!proto.mainframe.ResponseType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.mainframe.ResponseType} value */
proto.mainframe.Response.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.mainframe.SudoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.mainframe.SudoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.mainframe.SudoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.SudoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: (f = msg.getCommand()) && proto.mainframe.SudoCommand.toObject(includeInstance, f),
    currentdir: (f = msg.getCurrentdir()) && proto.mainframe.Folder.toObject(includeInstance, f),
    resp: jspb.Message.getFieldWithDefault(msg, 3, ""),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.mainframe.SudoResponse}
 */
proto.mainframe.SudoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.mainframe.SudoResponse;
  return proto.mainframe.SudoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.mainframe.SudoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.mainframe.SudoResponse}
 */
proto.mainframe.SudoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.mainframe.SudoCommand;
      reader.readMessage(value,proto.mainframe.SudoCommand.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 2:
      var value = new proto.mainframe.Folder;
      reader.readMessage(value,proto.mainframe.Folder.deserializeBinaryFromReader);
      msg.setCurrentdir(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResp(value);
      break;
    case 4:
      var value = /** @type {!proto.mainframe.ResponseType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.mainframe.SudoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.mainframe.SudoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.mainframe.SudoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.mainframe.SudoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.mainframe.SudoCommand.serializeBinaryToWriter
    );
  }
  f = message.getCurrentdir();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.mainframe.Folder.serializeBinaryToWriter
    );
  }
  f = message.getResp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional SudoCommand command = 1;
 * @return {?proto.mainframe.SudoCommand}
 */
proto.mainframe.SudoResponse.prototype.getCommand = function() {
  return /** @type{?proto.mainframe.SudoCommand} */ (
    jspb.Message.getWrapperField(this, proto.mainframe.SudoCommand, 1));
};


/** @param {?proto.mainframe.SudoCommand|undefined} value */
proto.mainframe.SudoResponse.prototype.setCommand = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mainframe.SudoResponse.prototype.clearCommand = function() {
  this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mainframe.SudoResponse.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Folder currentDir = 2;
 * @return {?proto.mainframe.Folder}
 */
proto.mainframe.SudoResponse.prototype.getCurrentdir = function() {
  return /** @type{?proto.mainframe.Folder} */ (
    jspb.Message.getWrapperField(this, proto.mainframe.Folder, 2));
};


/** @param {?proto.mainframe.Folder|undefined} value */
proto.mainframe.SudoResponse.prototype.setCurrentdir = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.mainframe.SudoResponse.prototype.clearCurrentdir = function() {
  this.setCurrentdir(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.mainframe.SudoResponse.prototype.hasCurrentdir = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string resp = 3;
 * @return {string}
 */
proto.mainframe.SudoResponse.prototype.getResp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.mainframe.SudoResponse.prototype.setResp = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ResponseType type = 4;
 * @return {!proto.mainframe.ResponseType}
 */
proto.mainframe.SudoResponse.prototype.getType = function() {
  return /** @type {!proto.mainframe.ResponseType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.mainframe.ResponseType} value */
proto.mainframe.SudoResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.mainframe.CommandType = {
  LS: 0,
  CAT: 1,
  CD: 2,
  HELP: 3,
  CLEAR: 4,
  LANDING: 5,
  DOWNLOAD_RESUME: 6,
  LOGIN: 7
};

/**
 * @enum {number}
 */
proto.mainframe.SudoCommandType = {
  LOGOUT: 0,
  TOUCH: 1,
  MKDIR: 2,
  RM: 3,
  ADDUSER: 4,
  EDIT: 5
};

/**
 * @enum {number}
 */
proto.mainframe.ResponseType = {
  TEXT: 0,
  MARKDOWN: 1,
  HTML: 2
};

goog.object.extend(exports, proto.mainframe);
