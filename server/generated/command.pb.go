// Code generated by protoc-gen-go. DO NOT EDIT.
// source: command.proto

package mainframe

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommandType int32

const (
	CommandType_ls              CommandType = 0
	CommandType_cat             CommandType = 1
	CommandType_cd              CommandType = 2
	CommandType_help            CommandType = 3
	CommandType_clear           CommandType = 4
	CommandType_landing         CommandType = 5
	CommandType_download_resume CommandType = 6
	CommandType_login           CommandType = 7
	CommandType_exec            CommandType = 8
)

var CommandType_name = map[int32]string{
	0: "ls",
	1: "cat",
	2: "cd",
	3: "help",
	4: "clear",
	5: "landing",
	6: "download_resume",
	7: "login",
	8: "exec",
}

var CommandType_value = map[string]int32{
	"ls":              0,
	"cat":             1,
	"cd":              2,
	"help":            3,
	"clear":           4,
	"landing":         5,
	"download_resume": 6,
	"login":           7,
	"exec":            8,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}

type SudoCommandType int32

const (
	SudoCommandType_logout  SudoCommandType = 0
	SudoCommandType_touch   SudoCommandType = 1
	SudoCommandType_mkdir   SudoCommandType = 2
	SudoCommandType_rm      SudoCommandType = 3
	SudoCommandType_adduser SudoCommandType = 4
	SudoCommandType_edit    SudoCommandType = 5
	SudoCommandType_seed    SudoCommandType = 6
	SudoCommandType_dump    SudoCommandType = 7
)

var SudoCommandType_name = map[int32]string{
	0: "logout",
	1: "touch",
	2: "mkdir",
	3: "rm",
	4: "adduser",
	5: "edit",
	6: "seed",
	7: "dump",
}

var SudoCommandType_value = map[string]int32{
	"logout":  0,
	"touch":   1,
	"mkdir":   2,
	"rm":      3,
	"adduser": 4,
	"edit":    5,
	"seed":    6,
	"dump":    7,
}

func (x SudoCommandType) String() string {
	return proto.EnumName(SudoCommandType_name, int32(x))
}

func (SudoCommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1}
}

type ResponseType int32

const (
	ResponseType_text     ResponseType = 0
	ResponseType_markdown ResponseType = 1
	ResponseType_html     ResponseType = 2
	ResponseType_json     ResponseType = 3
)

var ResponseType_name = map[int32]string{
	0: "text",
	1: "markdown",
	2: "html",
	3: "json",
}

var ResponseType_value = map[string]int32{
	"text":     0,
	"markdown": 1,
	"html":     2,
	"json":     3,
}

func (x ResponseType) String() string {
	return proto.EnumName(ResponseType_name, int32(x))
}

func (ResponseType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{2}
}

type AutoCompResponse struct {
	Completions          []string `protobuf:"bytes,1,rep,name=completions,proto3" json:"completions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AutoCompResponse) Reset()         { *m = AutoCompResponse{} }
func (m *AutoCompResponse) String() string { return proto.CompactTextString(m) }
func (*AutoCompResponse) ProtoMessage()    {}
func (*AutoCompResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}

func (m *AutoCompResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutoCompResponse.Unmarshal(m, b)
}
func (m *AutoCompResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutoCompResponse.Marshal(b, m, deterministic)
}
func (m *AutoCompResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoCompResponse.Merge(m, src)
}
func (m *AutoCompResponse) XXX_Size() int {
	return xxx_messageInfo_AutoCompResponse.Size(m)
}
func (m *AutoCompResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoCompResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AutoCompResponse proto.InternalMessageInfo

func (m *AutoCompResponse) GetCompletions() []string {
	if m != nil {
		return m.Completions
	}
	return nil
}

type Folder struct {
	Path                 string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Folder) Reset()         { *m = Folder{} }
func (m *Folder) String() string { return proto.CompactTextString(m) }
func (*Folder) ProtoMessage()    {}
func (*Folder) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1}
}

func (m *Folder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Folder.Unmarshal(m, b)
}
func (m *Folder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Folder.Marshal(b, m, deterministic)
}
func (m *Folder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Folder.Merge(m, src)
}
func (m *Folder) XXX_Size() int {
	return xxx_messageInfo_Folder.Size(m)
}
func (m *Folder) XXX_DiscardUnknown() {
	xxx_messageInfo_Folder.DiscardUnknown(m)
}

var xxx_messageInfo_Folder proto.InternalMessageInfo

func (m *Folder) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SudoCommand struct {
	Command              SudoCommandType `protobuf:"varint,1,opt,name=command,proto3,enum=mainframe.SudoCommandType" json:"command,omitempty"`
	Args                 []string        `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	CurrentDir           *Folder         `protobuf:"bytes,3,opt,name=currentDir,proto3" json:"currentDir,omitempty"`
	Jwt                  string          `protobuf:"bytes,4,opt,name=jwt,proto3" json:"jwt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SudoCommand) Reset()         { *m = SudoCommand{} }
func (m *SudoCommand) String() string { return proto.CompactTextString(m) }
func (*SudoCommand) ProtoMessage()    {}
func (*SudoCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{2}
}

func (m *SudoCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SudoCommand.Unmarshal(m, b)
}
func (m *SudoCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SudoCommand.Marshal(b, m, deterministic)
}
func (m *SudoCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SudoCommand.Merge(m, src)
}
func (m *SudoCommand) XXX_Size() int {
	return xxx_messageInfo_SudoCommand.Size(m)
}
func (m *SudoCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_SudoCommand.DiscardUnknown(m)
}

var xxx_messageInfo_SudoCommand proto.InternalMessageInfo

func (m *SudoCommand) GetCommand() SudoCommandType {
	if m != nil {
		return m.Command
	}
	return SudoCommandType_logout
}

func (m *SudoCommand) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *SudoCommand) GetCurrentDir() *Folder {
	if m != nil {
		return m.CurrentDir
	}
	return nil
}

func (m *SudoCommand) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type Command struct {
	Command              CommandType `protobuf:"varint,1,opt,name=command,proto3,enum=mainframe.CommandType" json:"command,omitempty"`
	Args                 []string    `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	CurrentDir           *Folder     `protobuf:"bytes,3,opt,name=currentDir,proto3" json:"currentDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{3}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCommand() CommandType {
	if m != nil {
		return m.Command
	}
	return CommandType_ls
}

func (m *Command) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Command) GetCurrentDir() *Folder {
	if m != nil {
		return m.CurrentDir
	}
	return nil
}

type Response struct {
	Command              *Command     `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	CurrentDir           *Folder      `protobuf:"bytes,2,opt,name=currentDir,proto3" json:"currentDir,omitempty"`
	Resp                 string       `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
	Type                 ResponseType `protobuf:"varint,4,opt,name=type,proto3,enum=mainframe.ResponseType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{4}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Response) GetCurrentDir() *Folder {
	if m != nil {
		return m.CurrentDir
	}
	return nil
}

func (m *Response) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

func (m *Response) GetType() ResponseType {
	if m != nil {
		return m.Type
	}
	return ResponseType_text
}

type SudoResponse struct {
	Command              *SudoCommand `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	CurrentDir           *Folder      `protobuf:"bytes,2,opt,name=currentDir,proto3" json:"currentDir,omitempty"`
	Resp                 string       `protobuf:"bytes,3,opt,name=resp,proto3" json:"resp,omitempty"`
	Type                 ResponseType `protobuf:"varint,4,opt,name=type,proto3,enum=mainframe.ResponseType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SudoResponse) Reset()         { *m = SudoResponse{} }
func (m *SudoResponse) String() string { return proto.CompactTextString(m) }
func (*SudoResponse) ProtoMessage()    {}
func (*SudoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{5}
}

func (m *SudoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SudoResponse.Unmarshal(m, b)
}
func (m *SudoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SudoResponse.Marshal(b, m, deterministic)
}
func (m *SudoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SudoResponse.Merge(m, src)
}
func (m *SudoResponse) XXX_Size() int {
	return xxx_messageInfo_SudoResponse.Size(m)
}
func (m *SudoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SudoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SudoResponse proto.InternalMessageInfo

func (m *SudoResponse) GetCommand() *SudoCommand {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *SudoResponse) GetCurrentDir() *Folder {
	if m != nil {
		return m.CurrentDir
	}
	return nil
}

func (m *SudoResponse) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

func (m *SudoResponse) GetType() ResponseType {
	if m != nil {
		return m.Type
	}
	return ResponseType_text
}

func init() {
	proto.RegisterEnum("mainframe.CommandType", CommandType_name, CommandType_value)
	proto.RegisterEnum("mainframe.SudoCommandType", SudoCommandType_name, SudoCommandType_value)
	proto.RegisterEnum("mainframe.ResponseType", ResponseType_name, ResponseType_value)
	proto.RegisterType((*AutoCompResponse)(nil), "mainframe.AutoCompResponse")
	proto.RegisterType((*Folder)(nil), "mainframe.Folder")
	proto.RegisterType((*SudoCommand)(nil), "mainframe.SudoCommand")
	proto.RegisterType((*Command)(nil), "mainframe.Command")
	proto.RegisterType((*Response)(nil), "mainframe.Response")
	proto.RegisterType((*SudoResponse)(nil), "mainframe.SudoResponse")
}

func init() { proto.RegisterFile("command.proto", fileDescriptor_213c0bb044472049) }

var fileDescriptor_213c0bb044472049 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x94, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xeb, 0x38, 0x89, 0x93, 0x49, 0x9e, 0x76, 0x9f, 0xad, 0xd4, 0x46, 0x29, 0x87, 0x28,
	0xa7, 0xa8, 0xa0, 0xb4, 0x84, 0x72, 0xe1, 0x82, 0x2a, 0xde, 0xee, 0x86, 0x3b, 0x72, 0xbd, 0x53,
	0xc7, 0xed, 0xbe, 0x58, 0xfb, 0xa2, 0xb6, 0x57, 0x3e, 0x07, 0x1f, 0x81, 0x23, 0x5f, 0x80, 0x6f,
	0x86, 0x76, 0xd3, 0x04, 0x37, 0x49, 0x11, 0x17, 0xc4, 0x6d, 0xb4, 0xfe, 0xfb, 0x3f, 0xbf, 0x99,
	0xd9, 0x1d, 0xf8, 0x2f, 0x57, 0x42, 0x64, 0x92, 0x4d, 0x2b, 0xad, 0xac, 0xa2, 0x5d, 0x91, 0x95,
	0xf2, 0x52, 0x67, 0x02, 0x87, 0x47, 0x85, 0x52, 0x05, 0xc7, 0x93, 0xf0, 0xe1, 0xc2, 0x5d, 0x9e,
	0xa0, 0xa8, 0xec, 0xdd, 0x42, 0x37, 0x3e, 0x03, 0x72, 0xee, 0xac, 0x7a, 0xa3, 0x44, 0x95, 0xa2,
	0xa9, 0x94, 0x34, 0x48, 0x47, 0xd0, 0xcb, 0x95, 0xa8, 0x38, 0xda, 0x52, 0x49, 0x33, 0x88, 0x46,
	0xf1, 0xa4, 0x9b, 0xd6, 0x8f, 0xc6, 0x4f, 0xa0, 0xfd, 0x5e, 0x71, 0x86, 0x9a, 0x52, 0x68, 0x56,
	0x99, 0x9d, 0x0f, 0x5a, 0xa3, 0x68, 0xd2, 0x4d, 0x43, 0x3c, 0xfe, 0x1a, 0x41, 0xef, 0xa3, 0x63,
	0xde, 0xd4, 0x13, 0xd1, 0x33, 0x48, 0xee, 0xe1, 0x06, 0xd1, 0x28, 0x9a, 0xec, 0xce, 0x86, 0xd3,
	0x15, 0xdd, 0xb4, 0x26, 0xfc, 0x74, 0x57, 0x61, 0xba, 0x94, 0x7a, 0xe7, 0x4c, 0x17, 0x66, 0xd0,
	0x08, 0xe9, 0x43, 0x4c, 0x9f, 0x03, 0xe4, 0x4e, 0x6b, 0x94, 0xf6, 0x6d, 0xa9, 0x07, 0xf1, 0x28,
	0x9a, 0xf4, 0x66, 0xff, 0xd7, 0xcc, 0x16, 0x50, 0x69, 0x4d, 0x44, 0x09, 0xc4, 0x57, 0x37, 0x76,
	0xd0, 0x0c, 0x7c, 0x3e, 0x1c, 0x7f, 0x89, 0x20, 0x59, 0xa2, 0x9d, 0xae, 0xa3, 0x1d, 0xd4, 0xdc,
	0xfe, 0x22, 0xd6, 0xf8, 0x5b, 0x04, 0x9d, 0x55, 0xc3, 0x9f, 0x3d, 0xa4, 0xe8, 0xcd, 0xe8, 0x26,
	0xc5, 0x2f, 0x82, 0x87, 0xd9, 0x1a, 0x7f, 0xd2, 0x04, 0x0a, 0x4d, 0x8d, 0xa6, 0x0a, 0x68, 0xdd,
	0x34, 0xc4, 0xf4, 0x29, 0x34, 0xed, 0x5d, 0x85, 0xa1, 0x33, 0xbb, 0xb3, 0xc3, 0x9a, 0xc1, 0x92,
	0x2b, 0x14, 0x1e, 0x44, 0xe3, 0xef, 0x11, 0xf4, 0xfd, 0xa4, 0x56, 0xc8, 0xa7, 0xeb, 0xc8, 0x07,
	0xdb, 0x67, 0xfa, 0x4f, 0xb1, 0x8f, 0x35, 0xf4, 0x6a, 0x43, 0xa4, 0x6d, 0x68, 0x70, 0x43, 0x76,
	0x68, 0x02, 0x71, 0x9e, 0x59, 0x12, 0xf9, 0x83, 0x9c, 0x91, 0x06, 0xed, 0x40, 0x73, 0x8e, 0xbc,
	0x22, 0x31, 0xed, 0x42, 0x2b, 0xe7, 0x98, 0x69, 0xd2, 0xa4, 0x3d, 0x48, 0x78, 0x26, 0x59, 0x29,
	0x0b, 0xd2, 0xa2, 0xfb, 0xb0, 0xc7, 0xd4, 0x8d, 0xe4, 0x2a, 0x63, 0x9f, 0x35, 0x1a, 0x27, 0x90,
	0xb4, 0xbd, 0x98, 0xab, 0xa2, 0x94, 0x24, 0xf1, 0x0e, 0x78, 0x8b, 0x39, 0xe9, 0x1c, 0x5f, 0xc2,
	0xde, 0xda, 0x9d, 0xa6, 0x00, 0x6d, 0xae, 0x0a, 0xe5, 0x2c, 0xd9, 0xf1, 0xff, 0x58, 0xe5, 0xf2,
	0x39, 0x89, 0x7c, 0x28, 0xae, 0x59, 0xa9, 0x49, 0xc3, 0x83, 0x68, 0x41, 0x62, 0x9f, 0x33, 0x63,
	0xcc, 0x19, 0xf4, 0x00, 0xde, 0x93, 0x95, 0x96, 0xb4, 0x7c, 0x64, 0x10, 0x19, 0x69, 0xfb, 0x88,
	0x39, 0x51, 0x91, 0xe4, 0xf8, 0x15, 0xf4, 0xeb, 0x15, 0xfb, 0x2f, 0x16, 0x6f, 0x7d, 0x8a, 0x3e,
	0x74, 0x44, 0xa6, 0xaf, 0x3d, 0x2f, 0x89, 0x42, 0x6d, 0x56, 0xf0, 0x45, 0x95, 0x57, 0x46, 0x49,
	0x12, 0xcf, 0x7e, 0x34, 0xa0, 0x65, 0xe6, 0xc8, 0x39, 0x7d, 0x09, 0xa0, 0x9d, 0x5c, 0x3e, 0x87,
	0x2d, 0xf7, 0x6e, 0xb8, 0xbf, 0xa5, 0xc5, 0xf4, 0x1c, 0x76, 0xb5, 0x93, 0xf5, 0x47, 0xfe, 0xc8,
	0xfc, 0x87, 0x87, 0x6b, 0xe7, 0x2b, 0x8b, 0xd7, 0xd0, 0xcf, 0xee, 0x37, 0x0f, 0x47, 0x8b, 0x5b,
	0x73, 0x1f, 0xd5, 0xce, 0x36, 0xd6, 0xd4, 0x07, 0x20, 0xc6, 0x31, 0x75, 0x5e, 0x37, 0x79, 0x8c,
	0xe2, 0xb7, 0x46, 0x67, 0x90, 0x14, 0x68, 0x53, 0xa5, 0x2c, 0x3d, 0x98, 0x2e, 0x96, 0xe5, 0x74,
	0xb9, 0x2c, 0xa7, 0xef, 0xfc, 0xb2, 0x1c, 0x6e, 0x5e, 0xd4, 0x8b, 0x76, 0x90, 0xbc, 0xf8, 0x19,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0xed, 0x79, 0x67, 0x79, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShellClient is the client API for Shell service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShellClient interface {
	RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	RunSudoCommand(ctx context.Context, in *SudoCommand, opts ...grpc.CallOption) (*SudoResponse, error)
	AutoComplete(ctx context.Context, in *Command, opts ...grpc.CallOption) (*AutoCompResponse, error)
	SudoAutoComplete(ctx context.Context, in *SudoCommand, opts ...grpc.CallOption) (*AutoCompResponse, error)
	GetRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Folder, error)
}

type shellClient struct {
	cc *grpc.ClientConn
}

func NewShellClient(cc *grpc.ClientConn) ShellClient {
	return &shellClient{cc}
}

func (c *shellClient) RunCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mainframe.shell/runCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellClient) RunSudoCommand(ctx context.Context, in *SudoCommand, opts ...grpc.CallOption) (*SudoResponse, error) {
	out := new(SudoResponse)
	err := c.cc.Invoke(ctx, "/mainframe.shell/runSudoCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellClient) AutoComplete(ctx context.Context, in *Command, opts ...grpc.CallOption) (*AutoCompResponse, error) {
	out := new(AutoCompResponse)
	err := c.cc.Invoke(ctx, "/mainframe.shell/autoComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellClient) SudoAutoComplete(ctx context.Context, in *SudoCommand, opts ...grpc.CallOption) (*AutoCompResponse, error) {
	out := new(AutoCompResponse)
	err := c.cc.Invoke(ctx, "/mainframe.shell/sudoAutoComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shellClient) GetRoot(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Folder, error) {
	out := new(Folder)
	err := c.cc.Invoke(ctx, "/mainframe.shell/getRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShellServer is the server API for Shell service.
type ShellServer interface {
	RunCommand(context.Context, *Command) (*Response, error)
	RunSudoCommand(context.Context, *SudoCommand) (*SudoResponse, error)
	AutoComplete(context.Context, *Command) (*AutoCompResponse, error)
	SudoAutoComplete(context.Context, *SudoCommand) (*AutoCompResponse, error)
	GetRoot(context.Context, *empty.Empty) (*Folder, error)
}

// UnimplementedShellServer can be embedded to have forward compatible implementations.
type UnimplementedShellServer struct {
}

func (*UnimplementedShellServer) RunCommand(ctx context.Context, req *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (*UnimplementedShellServer) RunSudoCommand(ctx context.Context, req *SudoCommand) (*SudoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSudoCommand not implemented")
}
func (*UnimplementedShellServer) AutoComplete(ctx context.Context, req *Command) (*AutoCompResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoComplete not implemented")
}
func (*UnimplementedShellServer) SudoAutoComplete(ctx context.Context, req *SudoCommand) (*AutoCompResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SudoAutoComplete not implemented")
}
func (*UnimplementedShellServer) GetRoot(ctx context.Context, req *empty.Empty) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoot not implemented")
}

func RegisterShellServer(s *grpc.Server, srv ShellServer) {
	s.RegisterService(&_Shell_serviceDesc, srv)
}

func _Shell_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe.shell/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServer).RunCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shell_RunSudoCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServer).RunSudoCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe.shell/RunSudoCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServer).RunSudoCommand(ctx, req.(*SudoCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shell_AutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServer).AutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe.shell/AutoComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServer).AutoComplete(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shell_SudoAutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SudoCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServer).SudoAutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe.shell/SudoAutoComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServer).SudoAutoComplete(ctx, req.(*SudoCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shell_GetRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShellServer).GetRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainframe.shell/GetRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShellServer).GetRoot(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shell_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainframe.shell",
	HandlerType: (*ShellServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "runCommand",
			Handler:    _Shell_RunCommand_Handler,
		},
		{
			MethodName: "runSudoCommand",
			Handler:    _Shell_RunSudoCommand_Handler,
		},
		{
			MethodName: "autoComplete",
			Handler:    _Shell_AutoComplete_Handler,
		},
		{
			MethodName: "sudoAutoComplete",
			Handler:    _Shell_SudoAutoComplete_Handler,
		},
		{
			MethodName: "getRoot",
			Handler:    _Shell_GetRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "command.proto",
}
