// @generated by protoc-gen-es v1.1.1 with parameter "target=ts,import_extension=none"
// @generated from file messages/command.proto (package mainframe, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum mainframe.CommandType
 */
export enum CommandType {
  /**
   * @generated from enum value: ls = 0;
   */
  ls = 0,

  /**
   * @generated from enum value: cat = 1;
   */
  cat = 1,

  /**
   * @generated from enum value: cd = 2;
   */
  cd = 2,

  /**
   * @generated from enum value: help = 3;
   */
  help = 3,

  /**
   * @generated from enum value: clear = 4;
   */
  clear = 4,

  /**
   * @generated from enum value: landing = 5;
   */
  landing = 5,

  /**
   * @generated from enum value: download_resume = 6;
   */
  download_resume = 6,

  /**
   * @generated from enum value: login = 7;
   */
  login = 7,

  /**
   * @generated from enum value: exec = 8;
   */
  exec = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(CommandType)
proto3.util.setEnumType(CommandType, "mainframe.CommandType", [
  { no: 0, name: "ls" },
  { no: 1, name: "cat" },
  { no: 2, name: "cd" },
  { no: 3, name: "help" },
  { no: 4, name: "clear" },
  { no: 5, name: "landing" },
  { no: 6, name: "download_resume" },
  { no: 7, name: "login" },
  { no: 8, name: "exec" },
]);

/**
 * @generated from enum mainframe.SudoCommandType
 */
export enum SudoCommandType {
  /**
   * @generated from enum value: logout = 0;
   */
  logout = 0,

  /**
   * @generated from enum value: touch = 1;
   */
  touch = 1,

  /**
   * @generated from enum value: mkdir = 2;
   */
  mkdir = 2,

  /**
   * @generated from enum value: rm = 3;
   */
  rm = 3,

  /**
   * @generated from enum value: adduser = 4;
   */
  adduser = 4,

  /**
   * @generated from enum value: edit = 5;
   */
  edit = 5,

  /**
   * @generated from enum value: seed = 6;
   */
  seed = 6,

  /**
   * @generated from enum value: dump = 7;
   */
  dump = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(SudoCommandType)
proto3.util.setEnumType(SudoCommandType, "mainframe.SudoCommandType", [
  { no: 0, name: "logout" },
  { no: 1, name: "touch" },
  { no: 2, name: "mkdir" },
  { no: 3, name: "rm" },
  { no: 4, name: "adduser" },
  { no: 5, name: "edit" },
  { no: 6, name: "seed" },
  { no: 7, name: "dump" },
]);

/**
 * @generated from enum mainframe.ResponseType
 */
export enum ResponseType {
  /**
   * @generated from enum value: text = 0;
   */
  text = 0,

  /**
   * @generated from enum value: markdown = 1;
   */
  markdown = 1,

  /**
   * @generated from enum value: html = 2;
   */
  html = 2,

  /**
   * @generated from enum value: json = 3;
   */
  json = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ResponseType)
proto3.util.setEnumType(ResponseType, "mainframe.ResponseType", [
  { no: 0, name: "text" },
  { no: 1, name: "markdown" },
  { no: 2, name: "html" },
  { no: 3, name: "json" },
]);

/**
 * @generated from message mainframe.AutoCompResponse
 */
export class AutoCompResponse extends Message<AutoCompResponse> {
  /**
   * @generated from field: repeated string completions = 1;
   */
  completions: string[] = [];

  constructor(data?: PartialMessage<AutoCompResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mainframe.AutoCompResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "completions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AutoCompResponse {
    return new AutoCompResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AutoCompResponse {
    return new AutoCompResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AutoCompResponse {
    return new AutoCompResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AutoCompResponse | PlainMessage<AutoCompResponse> | undefined, b: AutoCompResponse | PlainMessage<AutoCompResponse> | undefined): boolean {
    return proto3.util.equals(AutoCompResponse, a, b);
  }
}

/**
 * @generated from message mainframe.Folder
 */
export class Folder extends Message<Folder> {
  /**
   * @generated from field: string path = 5;
   */
  path = "";

  constructor(data?: PartialMessage<Folder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mainframe.Folder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Folder {
    return new Folder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Folder {
    return new Folder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Folder {
    return new Folder().fromJsonString(jsonString, options);
  }

  static equals(a: Folder | PlainMessage<Folder> | undefined, b: Folder | PlainMessage<Folder> | undefined): boolean {
    return proto3.util.equals(Folder, a, b);
  }
}

/**
 * @generated from message mainframe.SudoCommand
 */
export class SudoCommand extends Message<SudoCommand> {
  /**
   * @generated from field: mainframe.SudoCommandType command = 1;
   */
  command = SudoCommandType.logout;

  /**
   * @generated from field: repeated string args = 2;
   */
  args: string[] = [];

  /**
   * @generated from field: mainframe.Folder currentDir = 3;
   */
  currentDir?: Folder;

  /**
   * @generated from field: string jwt = 4;
   */
  jwt = "";

  constructor(data?: PartialMessage<SudoCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mainframe.SudoCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "enum", T: proto3.getEnumType(SudoCommandType) },
    { no: 2, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "currentDir", kind: "message", T: Folder },
    { no: 4, name: "jwt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoCommand {
    return new SudoCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoCommand {
    return new SudoCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoCommand {
    return new SudoCommand().fromJsonString(jsonString, options);
  }

  static equals(a: SudoCommand | PlainMessage<SudoCommand> | undefined, b: SudoCommand | PlainMessage<SudoCommand> | undefined): boolean {
    return proto3.util.equals(SudoCommand, a, b);
  }
}

/**
 * @generated from message mainframe.Command
 */
export class Command extends Message<Command> {
  /**
   * @generated from field: mainframe.CommandType command = 1;
   */
  command = CommandType.ls;

  /**
   * @generated from field: repeated string args = 2;
   */
  args: string[] = [];

  /**
   * @generated from field: mainframe.Folder currentDir = 3;
   */
  currentDir?: Folder;

  constructor(data?: PartialMessage<Command>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mainframe.Command";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "enum", T: proto3.getEnumType(CommandType) },
    { no: 2, name: "args", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "currentDir", kind: "message", T: Folder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Command {
    return new Command().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Command {
    return new Command().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Command {
    return new Command().fromJsonString(jsonString, options);
  }

  static equals(a: Command | PlainMessage<Command> | undefined, b: Command | PlainMessage<Command> | undefined): boolean {
    return proto3.util.equals(Command, a, b);
  }
}

/**
 * @generated from message mainframe.Response
 */
export class Response extends Message<Response> {
  /**
   * @generated from field: mainframe.Command command = 1;
   */
  command?: Command;

  /**
   * @generated from field: mainframe.Folder currentDir = 2;
   */
  currentDir?: Folder;

  /**
   * @generated from field: string resp = 3;
   */
  resp = "";

  /**
   * @generated from field: mainframe.ResponseType type = 4;
   */
  type = ResponseType.text;

  constructor(data?: PartialMessage<Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mainframe.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "message", T: Command },
    { no: 2, name: "currentDir", kind: "message", T: Folder },
    { no: 3, name: "resp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(ResponseType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response {
    return new Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJsonString(jsonString, options);
  }

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean {
    return proto3.util.equals(Response, a, b);
  }
}

/**
 * @generated from message mainframe.SudoResponse
 */
export class SudoResponse extends Message<SudoResponse> {
  /**
   * @generated from field: mainframe.SudoCommand command = 1;
   */
  command?: SudoCommand;

  /**
   * @generated from field: mainframe.Folder currentDir = 2;
   */
  currentDir?: Folder;

  /**
   * @generated from field: string resp = 3;
   */
  resp = "";

  /**
   * @generated from field: mainframe.ResponseType type = 4;
   */
  type = ResponseType.text;

  constructor(data?: PartialMessage<SudoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "mainframe.SudoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "command", kind: "message", T: SudoCommand },
    { no: 2, name: "currentDir", kind: "message", T: Folder },
    { no: 3, name: "resp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(ResponseType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoResponse {
    return new SudoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoResponse {
    return new SudoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoResponse {
    return new SudoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoResponse | PlainMessage<SudoResponse> | undefined, b: SudoResponse | PlainMessage<SudoResponse> | undefined): boolean {
    return proto3.util.equals(SudoResponse, a, b);
  }
}

