'use strict';

var fs = require('fs');
var path = require('path');
var util = require('util');
var pipe = require('pipe-io/legacy');
var findit = require('findit');
var log = require('debug')('copymitter');
var assert = require('assert');
var Emitter = require('events').EventEmitter;

util.inherits(Copymitter, Emitter);

module.exports = function (from, to, files) {
    assert(typeof from === 'string', 'from should be string!');
    assert(typeof to === 'string', 'to should be string!');
    assert(Array.isArray(files), 'files should be array!');

    var emitter = new Copymitter(from, to, files);

    return emitter;
};

function Copymitter(from, to, files) {
    var _this = this;

    this._files = [];
    this._i = 0;
    this._from = from;
    this._to = to;

    this._percent = 0;
    this._percentPrev = 0;

    this._parallel(from, files, function () {
        _this._n = _this._files.length;
        _this._cpAll();
    });
}

Copymitter.prototype._parallel = function (from, files, callback) {
    var _this2 = this;

    var i = files.length;
    var fn = function fn() {
        if (! --i) callback();
    };

    files.forEach(function (name) {
        var full = path.join(from, name);

        _this2._findFiles(full, fn);
    });
};

Copymitter.prototype.continue = function () {
    this._pause = false;
    this._cpAll();
};

Copymitter.prototype.pause = function () {
    this._pause = true;
};

Copymitter.prototype.abort = function () {
    this._files = [];
    this._cpAll();
};

Copymitter.prototype._cpAll = function () {
    var _this3 = this;

    var from = this._from;
    var to = this._to;
    var name = this._files.shift();

    ++this._i;

    if (!name) return this.emit('end');

    var fromFull = path.join(from, name);
    var toFull = path.join(to, name);
    var cpEmitter = this.cpOneFile(fromFull, toFull);

    cpEmitter.on('error', function (error) {
        var emitError = function emitError(error) {
            _this3.emit('error', error, toFull, _this3._i);
        };

        log('cpEmitter error: ' + error);

        switch (error.code) {
            default:
                _this3._progress();
                emitError(error);
                break;

            case 'ENOENT':
                _this3._enoent(fromFull, toFull, emitError);
                break;

            case 'EISDIR':
                _this3._eisdir(fromFull, toFull, emitError);
                break;
        }
    });

    cpEmitter.on('end', function () {
        _this3._progress();

        _this3.emit('file', toFull, _this3._i);

        if (!_this3._pause) _this3._cpAll();
    });
};

Copymitter.prototype._eisdir = function (from, to, fn) {
    var _this4 = this;

    var is = function is(error) {
        return _this4._is(error, fn);
    };

    log('eisdir');

    fs.stat(from, function (error, stat) {
        log('eisdir stat from');

        if (is(error)) return;

        fs.mkdir(to, stat.mode, function (error) {
            log('eisdir mkdir to, error: ' + error);

            if (error && error.code !== 'EEXIST') return fn(error);

            _this4._progress();
            _this4._cpAll();
        });
    });
};

Copymitter.prototype._enoent = function (from, to, fn) {
    var _this5 = this;

    var is = function is(error) {
        return _this5._is(error, fn);
    };

    log('enoent ' + from + ', ' + to);
    to = path.dirname(to);

    fs.stat(from, function (error, stat) {
        log('enoent stat from: ' + from);

        if (is(error)) return;

        fs.mkdir(to, stat.mode, function (error) {
            log('enoent mkdir to: ' + to);

            if (is(error)) return;

            log('enoent mkdir: no error');
            var name = path.basename(to);

            --_this5._i;
            _this5._files.unshift(name);
            _this5._cpAll();
        });
    });
};

Copymitter.prototype._is = function (error, fn) {
    error && fn(error);
    return !!error;
};

Copymitter.prototype._findFiles = function (filename, fn) {
    var _this6 = this;

    var from = this._from;
    var finder = findit(filename);
    var onFind = function onFind(name) {
        if (typeof name !== 'string') name = name.path;

        name = name.replace(from, '');

        _this6._files.push(name);
    };

    finder.on('file', onFind);
    finder.on('error', onFind);
    finder.on('directory', onFind);
    finder.on('link', onFind);

    finder.on('end', fn);
};

Copymitter.prototype.cpOneFile = function (from, to) {
    var _this7 = this;

    var emitter = new Emitter();
    var is = function is(error) {
        return _this7._is(error, function (error) {
            emitter.emit('error', error);
        });
    };

    var cp = function cp(mode) {
        var read = fs.createReadStream(from);
        var write = fs.createWriteStream(to, {
            mode: mode
        });

        log('cpOneFile cp: ' + from + ' -> ' + to);

        pipe([read, write], function (error) {
            if (is(error)) return;

            emitter.emit('end', from);
        });
    };

    fs.stat(from, function (error, stat) {
        if (is(error)) return;

        if (error || !stat.isDirectory()) return _this7._access(from, function (error) {
            if (!is(error)) cp(stat.mode);
        });

        fs.mkdir(to, stat.mode, function (error) {
            log('cpOneFile mkdir:  ' + to + ' ' + error);
            if (error && error.code !== 'EEXIST') return emitter.emit('error', error);

            emitter.emit('end', from);
        });
    });

    return emitter;
};

Copymitter.prototype._access = function (from, cb) {
    if (fs.access) return fs.access(from, fs.R_OK, cb);

    fs.open(from, 'r', function (error, fd) {
        if (error) return cb(error);

        fs.close(fd, cb);
    });
};

Copymitter.prototype._progress = function () {
    var value = Math.round(this._i * 100 / this._n);

    this._percent = value;

    if (value !== this._percentPrev) {
        this._percentPrev = value;
        this.emit('progress', value);
    }
};