'use strict';

var path = require('path');
var util = require('util');
var onezip = require('onezip/legacy');
var jaguar = require('jaguar/legacy');
var gzip = require('./gzip');
var Emitter = require('events').EventEmitter;

util.inherits(Inly, Emitter);

module.exports = function (from, to) {
    check(from, to);
    var emitter = new Inly(from, to);

    process.nextTick(function () {
        emitter._start();
    });

    return emitter;
};

function check(from, to) {
    if (typeof from !== 'string') throw Error('from should be a string!');

    if (typeof to !== 'string') throw Error('to should be a string!');
}

function Inly(from, to) {
    this._from = from;
    this._to = to;

    Emitter.call(this);
}

function getExtractor(name) {
    if (/\.zip/.test(name)) return onezip.extract;

    if (/\.(tar\.gz|tgz|tar)$/.test(name)) return jaguar.extract;

    if (/\.gz/.test(name)) return gzip;
}

Inly.prototype._start = function () {
    var _this = this;

    var from = this._from;
    var to = this._to;
    var ext = path.extname(from);
    var error = Error('Not supported archive type: "' + ext + '"');
    var extractor = getExtractor(from);

    if (!extractor) return this.emit('error', error);

    extractor(from, to).on('error', function (e) {
        _this.emit('error', e);
    }).on('progress', function (n) {
        _this.emit('progress', n);
    }).on('file', function (file) {
        _this.emit('file', file);
    }).on('end', function () {
        _this.emit('end');
    });
};