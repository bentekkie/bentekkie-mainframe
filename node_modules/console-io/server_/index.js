'use strict';

var DIR = './';
var DIR_ROOT = __dirname + '/..';

var path = require('path');

var join = require('join-io');
var mollify = require('mollify');
var spawnify = require('spawnify/legacy');
var rendy = require('rendy');

var express = require('express');
var currify = require('currify/legacy');
var Router = express.Router;

var modules = require('../json/modules');

var mollifyFn = mollify({
    dir: DIR_ROOT
});

var modulesFn = currify(_modulesFn);
var joinFn = currify(_joinFn);
var konsoleFn = currify(_konsoleFn);
var minifyFn = currify(_minifyFn);

var Console = require('./console');

module.exports = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var router = Router();
    var prefix = options.prefix || '/console';

    router.route(prefix + '/*').get(konsoleFn(options)).get(modulesFn(prefix, options)).get(joinFn(options)).get(minifyFn(options)).get(staticFn);

    return router;
};

module.exports.listen = function (socket, options) {
    if (!options) {
        options = socket;
        socket = null;
    }

    var o = options;

    if (!options.prefix) options.prefix = '/console';

    return Console(socket, {
        server: o.server,
        prefix: o.prefix,
        prompt: o.prompt,
        execute: o.execute || execute,
        authCheck: o.authCheck
    });
};

function _modulesFn(prefix, options, req, res, next) {
    if (req.url !== '/modules.json') return next();

    var urls = [];
    var o = options;

    var urlSocket = '';
    var urlJquery = prefix;
    var urlJoin = prefix + '/join';

    if (checkOption(o.online)) {
        urls.push.apply(urls, modules.map(function (m) {
            return rendy(m.remote, {
                version: m.version
            });
        }));
    } else {
        modules.forEach(function (m) {
            if (m.name === 'socket') urlSocket = Console.getSocketPath() + '/socket.io.js';else if (m.name === 'jquery') urlJquery += m.local;else urlJoin += ':' + m.local;
        });

        urls.push.apply(urls, [urlJquery, urlSocket, urlJoin]);
    }

    res.type('json');
    res.send(urls);
}

function checkOption(isOption) {
    if (typeof isOption === 'function') return isOption();

    if (typeof isOption === 'undefined') return true;

    return isOption;
}

function _konsoleFn(options, req, res, next) {
    var o = options || {};
    var prefix = o.prefix || '/console';
    var url = req.url;

    if (url.indexOf(prefix)) return next();

    req.url = req.url.replace(prefix, '');

    if (req.url === '/console.js') req.url = '/client' + req.url;

    next();
}

function _joinFn(o, req, res, next) {
    if (req.url.indexOf('/join')) return next();

    var minify = checkOption(o.minify);

    var joinFunc = join({
        minify: minify,
        dir: DIR_ROOT
    });

    joinFunc(req, res, next);
}

function _minifyFn(o, req, res, next) {
    var url = req.url;
    var minify = checkOption(o.minify);

    if (!minify) return next();

    var sendFile = function sendFile(url) {
        return function () {
            var file = path.normalize(DIR_ROOT + url);
            res.sendFile(file);
        };
    };

    mollifyFn(req, res, sendFile(url));
}

function staticFn(req, res) {
    var file = path.normalize(DIR_ROOT + req.url);
    res.sendFile(file);
}

function execute(socket, command, cwd) {
    var cmd = command.cmd;
    var assign = Object.assign || objectAssign;
    var env = assign({}, command.env, process.env);

    var spawn = spawnify(cmd, {
        env: env,
        cwd: cwd()
    });

    socket.on('kill', kill);
    socket.on('write', write);

    spawn.on('error', onError);
    spawn.on('data', onData);

    spawn.once('path', onPath);
    spawn.once('close', onClose);

    function kill() {
        spawn.kill();
    }

    function write(data) {
        spawn.write(data);
    }

    function onError(error) {
        socket.emit('err', error.message);
    }

    function onData(data) {
        socket.emit('data', data);
    }

    function onPath(path) {
        socket.emit('path', path);
        cwd(path);
    }

    function onClose() {
        socket.removeListener('kill', kill);
        socket.removeListener('write', write);

        spawn.removeListener('error', onError);
        spawn.removeListener('data', onData);

        socket.emit('prompt');
    }
}

function objectAssign() {
    var o = {};

    [].forEach.call(arguments, function (obj) {
        Object.keys(obj).forEach(function (k) {
            o[k] = obj[k];
        });
    });

    return o;
}