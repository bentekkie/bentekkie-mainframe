'use strict';

var inly = require('inly/legacy');
var mellow = require('mellow');

module.exports = function (socket, options) {
    if (!options) options = {};

    listen(socket, options);
};

function getRoot(root) {
    if (typeof root === 'function') return root();

    return root;
}

function isRootWin32(path, root) {
    var isRoot = path === '/';
    var isWin32 = process.platform === 'win32';
    var isConfig = root === '/';

    return isWin32 && isRoot && isConfig;
}

function getWin32RootMsg() {
    return Error('Could not extract from/to root on windows!');
}

function check(authCheck) {
    if (authCheck && typeof authCheck !== 'function') throw Error('authCheck should be function!');
}

function listen(socket, options) {
    var authCheck = options.authCheck;
    var prefix = options.prefix || 'omnes';
    var root = options.root || '/';

    check(authCheck);

    socket.of(prefix).on('connection', function (socket) {
        if (!authCheck) return connection(root, socket);

        authCheck(socket, function () {
            connection(root, socket);
        });
    });
}

function connection(root, socket) {
    socket.on('extract', function (from, to) {
        preprocess('extract', root, socket, from, to);
    });
}

function preprocess(op, root, socket, from, to) {
    var value = getRoot(root);

    from = mellow.pathToWin(from, value);
    to = mellow.pathToWin(to, value);

    var isRoot = function isRoot(item) {
        return isRootWin32(item, value);
    };

    if (![from, to].some(isRoot)) {
        operate(socket, op, from, to);
    } else {
        socket.emit('err', getWin32RootMsg());
        socket.emit('end');
    }
}

function operate(socket, op, from, to) {
    var extractor = inly(from, to);

    extractor.on('file', function (name) {
        socket.emit('file', name);
    });

    extractor.on('progress', function (percent) {
        socket.emit('progress', percent);
    });

    extractor.on('error', function (error) {
        var message = error.message;
        socket.emit('err', message);
    });

    extractor.on('end', function () {
        socket.emit('end');
    });
}