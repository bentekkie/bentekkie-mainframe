'use strict';

var fs = require('fs');
var path = require('path');
var util = require('util');
var findit = require('findit');
var assert = require('assert');
var rimraf = require('rimraf');
var Emitter = require('events').EventEmitter;

util.inherits(Remy, Emitter);

module.exports = function (from, files) {
    assert(typeof from === 'string', 'from should be string!');

    if (!files) {
        files = [path.basename(from)];

        from = path.dirname(from);
    }

    var emitter = new Remy(from, files);

    return emitter;
};

function Remy(from, files) {
    var _this = this;

    this._i = 0;
    this._files = [];
    this._dirs = [];

    this._percent = 0;
    this._percentPrev = 0;

    this._parallel(from, files, function () {
        var filesCount = _this._files.length;
        var dirsCount = _this._dirs.length;

        _this._n = filesCount + dirsCount;

        _this._rmAll();
    });
}

Remy.prototype._parallel = function (from, files, callback) {
    var _this2 = this;

    var i = files.length;
    var fn = function fn() {
        if (! --i) callback();
    };

    files.forEach(function (name) {
        var full = path.join(from, name);

        _this2._findFiles(full, fn);
    });
};

Remy.prototype.continue = function () {
    this._pause = false;
    this._rmAll();
};

Remy.prototype.pause = function () {
    this._pause = true;
};

Remy.prototype.abort = function () {
    this._files = [];
    this._dirs = [];

    this._rmAll();
};

Remy.prototype._rmAll = function () {
    var _this3 = this;

    var rmFn = this._rmOneFile;
    var name = this._files.shift();

    if (!name) {
        name = this._dirs.shift();
        rmFn = this._rmOneDir;
    }

    if (!name) return this.emit('end');

    var rmEmitter = rmFn(name);

    rmEmitter.on('error', function (error) {
        _this3._progress();
        _this3.emit('error', error);
    });

    rmEmitter.on('end', function () {
        _this3._progress();

        _this3.emit('file', name);

        if (!_this3._pause) _this3._rmAll();
    });
};

Remy.prototype._findFiles = function (filename, fn) {
    var _this4 = this;

    var finder = findit(filename);

    var onError = function onError(error) {
        _this4._files.push(error.path);
    };

    var onFile = function onFile(name) {
        _this4._files.push(name);
    };

    var onDir = function onDir(name) {
        _this4._dirs.push(name);
    };

    finder.on('file', onFile);
    finder.on('error', onError);
    finder.on('directory', onDir);
    finder.on('link', onFile);
    finder.on('end', fn);
};

Remy.prototype._rmOneFile = function (name) {
    var emitter = new Emitter();

    fs.unlink(name, function (error) {
        if (error) return emitter.emit('error', error);

        emitter.emit('end');
    });

    return emitter;
};

Remy.prototype._rmOneDir = function (name) {
    var emitter = new Emitter();

    rimraf(name, function (error) {
        if (error && error.code !== 'ENOENT') return emitter.emit('error', error);

        emitter.emit('end');
    });

    return emitter;
};

Remy.prototype._progress = function () {
    ++this._i;

    var value = Math.round(this._i * 100 / this._n);

    this._percent = value;

    if (value === this._percentPrev) return;

    this._percentPrev = value;
    this.emit('progress', value);
};