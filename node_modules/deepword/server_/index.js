'use strict';

var DIR_ROOT = __dirname + '/..';
var path = require('path');

var restafary = require('restafary/legacy');
var socketFile = require('socket-file');
var express = require('express');
var currify = require('currify/legacy');

var storage = require('./storage');
var resolvePath = require('./resolve-path');

var Router = express.Router;

var rootStorage = storage();
var optionsStorage = storage();

var optionsFn = currify(configFn);
var restafaryFn = currify(_restafaryFn);

module.exports = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    optionsStorage(options);

    var router = Router();
    var prefix = options.prefix || '/deepword';

    router.route(prefix + '/*').get(deepword(options)).get(optionsFn(options)).get(restafaryFn('')).get(monaco).get(staticFn).put(restafaryFn(prefix));

    return router;
};

module.exports.listen = function (socket) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!options.prefix) options.prefix = '/deepword';

    if (!options.root) options.root = '/';

    rootStorage(options.root);

    return socketFile(socket, options);
};

function checkOption(isOption) {
    if (typeof isOption === 'function') return isOption();

    if (typeof isOption === 'undefined') return true;

    return isOption;
}

function deepword(options) {
    return serve.bind(null, options);
}

function serve(options, req, res, next) {
    var o = options || {};
    var prefix = o.prefix || '/deepword';
    var url = req.url;

    if (url.indexOf(prefix)) return next();

    req.url = req.url.replace(prefix, '');

    var regExp = /^\/deepword\.(js(\.map)?|css)$/;

    if (regExp.test(req.url)) req.url = '/dist' + req.url;

    next();
}

function configFn(o, req, res, next) {
    var online = checkOption(o.online);
    var diff = checkOption(o.diff);
    var zip = checkOption(o.zip);

    if (req.url.indexOf('/options.json')) return next();

    res.type('json').send({
        diff: diff,
        zip: zip,
        online: online
    });
}

function _restafaryFn(prefix, req, res, next) {
    var url = req.url;

    var api = '/api/v1/fs';

    if (url.indexOf(prefix + api)) return next();

    req.url = url.replace(prefix, '');

    var restafaryFunc = restafary({
        prefix: api,
        root: rootStorage()
    });

    restafaryFunc(req, res, next);
}

function monaco(req, res, next) {
    if (req.url.indexOf('/monaco')) return next();

    var sendFile = res.sendFile.bind(res);

    var replace = function replace(path) {
        return req.url.replace('/monaco', path);
    };

    var sendError = function sendError(error) {
        res.status(404).send(error);
    };

    resolvePath('monaco-editor').then(replace).then(sendFile).catch(sendError);
}

function staticFn(req, res) {
    var file = path.normalize(DIR_ROOT + req.url);
    res.sendFile(file);
}